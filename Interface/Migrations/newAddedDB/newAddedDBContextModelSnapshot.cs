// <auto-generated />
using Interface.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Interface.Migrations.newAddedDB
{
    [DbContext(typeof(newAddedDBContext))]
    partial class newAddedDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entity.FabricationCategoryEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FabricationCategories", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.FabricationEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FabricationCategoryID")
                        .HasColumnType("int");

                    b.Property<double>("PerUnit")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FabricationCategoryID");

                    b.ToTable("Fabrications", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.FabricationPriceEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FabricationID")
                        .HasColumnType("int");

                    b.Property<int>("GlassStrengthID")
                        .HasColumnType("int");

                    b.Property<int>("GlassThicknesID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<byte>("Sqf25")
                        .HasColumnType("tinyint");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FabricationID");

                    b.HasIndex("GlassThicknesID");

                    b.ToTable("FabricationPrices", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassExtraPriceEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GlassExtraPrices", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassOptionEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GlassOptions", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassPriceEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GlassOptionID")
                        .HasColumnType("int");

                    b.Property<int>("GlassStrengthID")
                        .HasColumnType("int");

                    b.Property<int>("GlassThicknesID")
                        .HasColumnType("int");

                    b.Property<int>("GlassTypeID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GlassOptionID");

                    b.ToTable("GlassPrices", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassStrengthEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GlassStrengths", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassThicknesEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GlassThicknes", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassTypeEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GlassTypes", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassType_OptionEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GlassOptionID")
                        .HasColumnType("int");

                    b.Property<int>("GlassTypeID")
                        .HasColumnType("int");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GlassOptionID");

                    b.HasIndex("GlassTypeID");

                    b.ToTable("GlassType_Option", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassType_StrengthEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GlassStrengthID")
                        .HasColumnType("int");

                    b.Property<int>("GlassTypeID")
                        .HasColumnType("int");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GlassStrengthID");

                    b.HasIndex("GlassTypeID");

                    b.ToTable("GlassType_Strength", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassType_ThicknesEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GlassThicknesID")
                        .HasColumnType("int");

                    b.Property<int>("GlassTypeID")
                        .HasColumnType("int");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GlassThicknesID");

                    b.HasIndex("GlassTypeID");

                    b.ToTable("GlassType_Thicknes", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.Glass_FabricationEnt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FabricationID")
                        .HasColumnType("int");

                    b.Property<int>("GlassTypeID")
                        .HasColumnType("int");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FabricationID");

                    b.HasIndex("GlassTypeID");

                    b.ToTable("Glass_Fabrications", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entity.newAdded.newFrameType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("PerUnit")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<double>("lib")
                        .HasColumnType("float");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("newFrameType");
                });

            modelBuilder.Entity("Infrastructure.Entity.newAdded.newGlassType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("lib")
                        .HasColumnType("int");

                    b.Property<string>("modifiedInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("perUnit")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("newGlassType");
                });

            modelBuilder.Entity("Infrastructure.Entity.FabricationEnt", b =>
                {
                    b.HasOne("Infrastructure.Entity.FabricationCategoryEnt", "FabricationCategory")
                        .WithMany()
                        .HasForeignKey("FabricationCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FabricationCategory");
                });

            modelBuilder.Entity("Infrastructure.Entity.FabricationPriceEnt", b =>
                {
                    b.HasOne("Infrastructure.Entity.FabricationEnt", "Fabrication")
                        .WithMany()
                        .HasForeignKey("FabricationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entity.GlassThicknesEnt", "GlassThicknes")
                        .WithMany()
                        .HasForeignKey("GlassThicknesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fabrication");

                    b.Navigation("GlassThicknes");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassPriceEnt", b =>
                {
                    b.HasOne("Infrastructure.Entity.GlassOptionEnt", "GlassOption")
                        .WithMany()
                        .HasForeignKey("GlassOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlassOption");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassType_OptionEnt", b =>
                {
                    b.HasOne("Infrastructure.Entity.GlassOptionEnt", "GlassOption")
                        .WithMany()
                        .HasForeignKey("GlassOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entity.GlassTypeEnt", "GlassType")
                        .WithMany()
                        .HasForeignKey("GlassTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlassOption");

                    b.Navigation("GlassType");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassType_StrengthEnt", b =>
                {
                    b.HasOne("Infrastructure.Entity.GlassStrengthEnt", "GlassStrength")
                        .WithMany()
                        .HasForeignKey("GlassStrengthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entity.GlassTypeEnt", "GlassType")
                        .WithMany()
                        .HasForeignKey("GlassTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlassStrength");

                    b.Navigation("GlassType");
                });

            modelBuilder.Entity("Infrastructure.Entity.GlassType_ThicknesEnt", b =>
                {
                    b.HasOne("Infrastructure.Entity.GlassThicknesEnt", "GlassThicknes")
                        .WithMany()
                        .HasForeignKey("GlassThicknesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entity.GlassTypeEnt", "GlassType")
                        .WithMany()
                        .HasForeignKey("GlassTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlassThicknes");

                    b.Navigation("GlassType");
                });

            modelBuilder.Entity("Infrastructure.Entity.Glass_FabricationEnt", b =>
                {
                    b.HasOne("Infrastructure.Entity.FabricationEnt", "Fabrication")
                        .WithMany()
                        .HasForeignKey("FabricationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entity.GlassTypeEnt", "GlassType")
                        .WithMany()
                        .HasForeignKey("GlassTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fabrication");

                    b.Navigation("GlassType");
                });
#pragma warning restore 612, 618
        }
    }
}
